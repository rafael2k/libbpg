#!/bin/sh

if test x"$1" = x"-h" -o x"$1" = x"--help" ; then
cat << EOF
Usage: ./configure [options]

options:
  -h, --help                   print this message

  --prefix=PREFIX              install architecture-independent files into PREFIX
                               [/usr/local]
  --bindir=DIR                 install binaries in DIR [EPREFIX/bin]
  --libdir=DIR                 install libs in DIR [EPREFIX/lib]
  --includedir=DIR             install headers in DIR [PREFIX/include]
  --destdir=DIR                installation destination

  --cc=CC                      use a defined compiler for compilation and linking [gcc]
  --cross-prefix=PREFIX        use PREFIX for compilation tools [none]
  --target-os=OS               specifiy target OS [osx,win32,unix; default: unix]
  --enable-debug               compile with debug symbols and never strip
  --enable-shared              build a shared library

  --enable-emcc                enable compilation of Javascript decoder with Emscripten
  --disable-bpgview            don't build bpgview
  --disable-jctvc              disable JCTVC encoder
  --enable-x265                enable x265 encoder
  --enable-jctvc-high          enable bit depths > 12 in JCTVC (need more tests to
                               validate encoder)

  --extra-cflags=XCFLAGS       add XCFLAGS to CFLAGS
  --extra-cppflags=XCPPFLAGS   add XCXXFLAGS to CPPFLAGS
  --extra-cxxflags=XCXXFLAGS   add XCXXFLAGS to CXXFLAGS
  --extra-ldflags=XLDFLAGS     add XLDFLAGS to LDFLAGS
  --extra-libs=XLIBS           add XLIBS to LIBS

EOF
exit 1
fi

#-----------------------------------------------------------------------------

error_exit()
{
    echo error: $1
    exit 1
}

rm -f config.mak


echo
echo generating config.mak ...
echo


VERSION=$(cat VERSION)

prefix=
bindir=
libdir=
includedir=
DESTDIR=

CROSS=

CC=${CROSS_PREFIX}gcc
CXX=${CROSS_PREFIX}g++
AR=${CROSS_PREFIX}ar
LD=${CROSS_PREFIX}g++
EMCC=emcc

DEBUG=no
SHARED=no
LIBBPG=libbpg.a
EXT=

# Compile bpgview (SDL and SDL_image libraries needed)
USE_BPGVIEW=y
# Enable compilation of Javascript decoder with Emscripten
USE_EMCC=no
# Enable x265 for the encoder (you must install it before)
USE_X265=no
# Enable the JCTVC code (best quality but slow) for the encoder
USE_JCTVC=y
# Enable it to use bit depths > 12 (need more tests to validate encoder)
USE_JCTVC_HIGH_BIT_DEPTH=no
# Enable for compilation on MacOS X
TARGET_OS=unix


CFLAGS="-Wall -O3  -fno-asynchronous-unwind-tables -fdata-sections -ffunction-sections -fno-math-errno -fno-signed-zeros -fno-tree-vectorize -fomit-frame-pointer -I."
CPPFLAGS="-D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_REENTRANT -DCONFIG_BPG_VERSION=\\\"${VERSION}\\\""
LDFLAGS="-L."
LIBS="-lpng16 -lrt -lm -lpthread -lz"

# Emscriptem config
EMLDFLAGS="-s \"EXPORTED_FUNCTIONS=['_bpg_decoder_open','_bpg_decoder_decode','_bpg_decoder_get_info','_bpg_decoder_start','_bpg_decoder_get_frame_duration','_bpg_decoder_get_line','_bpg_decoder_close','_malloc','_free']\""
EMCFLAGS="$CFLAGS"

XCFLAGS=
XCPPFLAGS=
XCXXFLAGS=
XLDFLAGS=
XLIBS=

for opt; do
    optarg="${opt#*=}"
    case "$opt" in
        --prefix=*)
            prefix="$optarg"
            ;;
        --bindir=*)
            bindir="$optarg"
            ;;
        --libdir=*)
            libdir="$optarg"
            ;;
        --includedir=*)
            includedir="$optarg"
            ;;
        --destdir=*)
            DESTDIR="$optarg"
            ;;
        --cc=*)
            CC="$optarg"
            LD="$optarg"
            ;;
        --cross-prefix=*)
            CROSS="$optarg"
            ;;
        --target-os=*)
            TARGET_OS="$optarg"
            ;;
        --enable-debug)
            DEBUG="y"
            ;;
        --enable-shared)
            SHARED="y"
            ;;
        --enable-emcc)
            USE_EMCC="y"
            ;;
        --disable-bpgview)
            USE_BPGVIEW="no"
            ;;
        --disable-jctvc)
            USE_JCTVC="no"
            ;;
        --enable-x265)
            USE_X265="y"
            ;;
        --enable-jctvc-high)
            USE_JCTVC_HIGH_BIT_DEPTH="y"
            ;;
        --extra-cflags=*)
            XCFLAGS="$optarg"
            ;;
        --extra-cppflags=*)
            XCPPFLAGS="$optarg"
            ;;
        --extra-cxxflags=*)
            XCXXFLAGS="$optarg"
            ;;
        --extra-ldflags=*)
            XLDFLAGS="$optarg"
            ;;
        --extra-libs=*)
            XLIBS="$optarg"
            ;;
        *)
            echo "warning: unknown option $opt"
            ;;
    esac
done

test -n "$prefix" || prefix="/usr/local"
test -n "$bindir" || bindir='${prefix}/bin'
test -n "$libdir" || libdir='${prefix}/lib'
test -n "$includedir" || includedir='${prefix}/include'

if [ $USE_JCTVC != "y" ] && [ $USE_X265 != "y" ]; then
    error_exit "no hevc encoder selected"
fi


CC="${CROSS}${CC}"
CXX="${CROSS}${CXX}"
AR="${CROSS}${AR}"
LD="${CROSS}${LD}"
EMCC="${EMCC}"

for f in "$CC" "$CXX" "$AR" "$LD"; do
    test -n "$(which $f 2> /dev/null)" || error_exit "'$f' is not executable"
done
if [ "$USE_EMCC" = "y" ]; then
    test -n "$(which $EMCC 2> /dev/null)" || error_exit "'$EMCC' is not executable"
fi

if [ $TARGET_OS = "osx" ]; then
    LDFLAGS="${LDFLAGS} -Wl,-dead_strip"
elif [ $TARGET_OS = "win32" ]; then
    LIBS="-lrt"
    LDFLAGS="${LDFLAGS} -static"
elif [ $TARGET_OS = "unix" ]; then
    CFLAGS="-I/usr/include/libpng16 ${CFLAGS}"
    LIBS="-lrt"
    LDFLAGS="${LDFLAGS} -Wl,--gc-sections -Wl,--as-needed"
else
    error_exit "unknown OS '$TARGET_OS'"
fi
LIBS="${LIBS} -lm -lpthread"

test $DEBUG != "y" || CFLAGS="${CFLAGS} -g"
test $USE_JCTVC_HIGH_BIT_DEPTH != "y" || CPPFLAGS="${CPPFLAGS} -DRExt__HIGH_BIT_DEPTH_SUPPORT"
if [ $SHARED = "y" ]; then
   CFLAGS="${CFLAGS} -fPIC"
   LIBBPG="libbpg.so"
fi


cat > libbpg.pc.in << EOF
prefix=${prefix}
exec_prefix=${prefix}
libdir=${libdir}
includedir=${includedir}

Name: libbpg
Description: library of functions for manipulating BPG image format files
Version: ${VERSION}
Libs: -L\${libdir} -lbpg
Libs.private: @BPGENC_LIBS@
Cflags: -I\${includedir}
EOF


cat >> config.mak << EOF
DESTDIR = $DESTDIR
prefix = $prefix
bindir = $bindir
libdir = $libdir
includedir = $includedir
CC := $CC
CXX := $CXX
AR := $AR
LD := $LD
CFLAGS += $CFLAGS $XCFLAGS
CPPFLAGS += $CPPFLAGS $XCPPFLAGS
CXXFLAGS += $CFLAGS $XCXXFLAGS
LDFLAGS += $LDFLAGS $XLDFLAGS
LIBS = $LIBS
XLIBS = $XLIBS
USE_EMCC = $USE_EMCC
USE_X265 = $USE_X265
USE_JCTVC = $USE_JCTVC
USE_BPGVIEW = $USE_BPGVIEW
LIBBPG = $LIBBPG
SONAME = libbpg-$VERSION.so.0
VERSION = $VERSION
$TARGET_OS = y
EOF

cat config.mak


cat << EOF

configure finished

  type 'make'             : compile library and tools
  type 'make install'     : install all into system

EOF

exit 0
